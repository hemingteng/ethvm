version: '3.6'

networks:
  web:
    external: true
  back:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

volumes:
  redis-volume:
  mongodb-volume:
  ethereumj-volume:

services:

  traefik:
    image: traefik:1.6.2-alpine
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./provisioners/docker/config/traefik/traefik.dev.toml:/etc/traefik/traefik.toml
    networks:
      - web
      - back
    ports:
      - 80:80
      - 81:81

  ethvm:
    build:
      context: ./apps/ethvm
      dockerfile: ../../provisioners/docker/images/dev/ethvm/Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/ethvm:/var/ethvm
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ethvm.lan'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=ethvm'
      - 'traefik.port=8080'

  server:
    build:
      context: ./apps/server
      dockerfile: ../../provisioners/docker/images/dev/server/Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/server:/var/ethvm-server
    depends_on:
      - redis
      - mongodb
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ws.ethvm.lan'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:http://ethvm.lan||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=server'
      - 'traefik.port=3000'
    environment:
      - ETHVM_DATA_STORE_REDIS_HOST=redis
      - ETHVM_ETH_TRIE_DB_REDIS_HOST=redis

  redis:
    image: redis:4.0.9-alpine
    restart: unless-stopped
    volumes:
      - redis-volume:/data
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:redis.ethvm.lan'
      - 'traefik.port=6379'
      - 'traefik.backend=redis'

  mongodb:
    image: enkryptio/mongodb:4.0
    restart: unless-stopped
    volumes:
      - mongodb-volume:/data/db
      - ./provisioners/docker/config/mongo/ethvm_sample.archive:/ethvm_sample.archive
    networks:
      - back
    ports:
      - 27017:27017
    command: "mongod --bind_ip 0.0.0.0 --replSet rs0 --quiet --slowms 10000"
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:mongo.ethvm.lan'
      - 'traefik.port=27017'
      - 'traefik.backend=mongodb'

  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    networks:
      back:
        ipv4_address: 172.25.0.103
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: 'server.1=zookeeper:2888:3888'
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:5.0.0
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      back:
        ipv4_address: 172.25.0.104
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 'kafka'
      KAFKA_ADVERTISED_LISTENERS: 'DOCKER://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'DOCKER:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'DOCKER'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_MESSAGE_MAX_BYTES: '2000000000'
